// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  name                String?
  emailVerified       DateTime?
  image               String?
  password            String? // For credentials provider
  onboardingComplete  Boolean             @default(false)
  profileComplete     Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  resumes             ResumeVersion[]
  experiences         Experience[]
  education           Education[]
  skills              SkillEndorsement[]
  certifications      Certification[]
  events              ProgressEvent[]
  ratings             RatingSnapshot[]
  settings            UserSettings?
  accounts            Account[]
  sessions            Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResumeVersion {
  id        String    @id @default(cuid())
  userId    String
  url       String
  fileName  String
  parsedAt  DateTime?
  parser    String // "heuristic" | "llm"
  json      Json // normalized parsed fields
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id             String    @id @default(cuid())
  userId         String
  title          String
  company        String
  companyTier    Int? // 1 (top) to 5 (long tail), nullable
  industry       String?
  startDate      DateTime
  endDate        DateTime?
  employmentType String // "internship" | "contract" | "fulltime"
  impactScore    Float? // 0-1 extracted from bullets
  bullets        String[]
  geo            String?
  createdAt      DateTime  @default(now())
  User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id         String    @id @default(cuid())
  userId     String
  school     String
  schoolTier Int? // 1–5
  degree     String
  major      String?
  gpa        Float?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  User       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SkillEndorsement {
  id        String    @id @default(cuid())
  userId    String
  skill     String
  level     Int? // 1–5 self-assessed
  verified  Boolean   @default(false)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id        String    @id @default(cuid())
  userId    String
  name      String
  authority String?
  issuedOn  DateTime?
  expiresOn DateTime?
  createdAt DateTime  @default(now())
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProgressEvent {
  id        String   @id @default(cuid())
  userId    String
  type      String // "internship_offer" | "promotion" | "proj_shipped" | "blog_post" | "kaggle" | ...
  metadata  Json
  proofUrl  String?
  value     Float // XP value before decay/multipliers
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MarketSignal {
  id            String   @id @default(cuid())
  roleFamily    String // e.g., "Investment Ops", "Software", "Data"
  industry      String // e.g., "Asset Management", "FinTech"
  geo           String? // optional
  date          DateTime
  demandIdx     Float // 0–1
  skillScarcity Json // { "Python": 0.72, "SQL": 0.61 }
  compMomentum  Float // −1..+1
  createdAt     DateTime @default(now())

  @@unique([roleFamily, industry, geo, date])
  @@index([roleFamily, industry])
}

model RatingSnapshot {
  id           String   @id @default(cuid())
  userId       String
  overall      Int
  confidence   Float
  breakdown    Json // [{factor:"Company Tier", raw: 0.65, weight:0.18, contrib:11.7}, ...]
  explanations String[]
  modelVersion String   @default("v1.0")
  createdAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model UserSettings {
  id             String  @id @default(cuid())
  userId         String  @unique
  allowLLM       Boolean @default(false)
  geo            String?
  targetRole     String?
  targetIndustry String?
  visibility     String  @default("private")
  User           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

